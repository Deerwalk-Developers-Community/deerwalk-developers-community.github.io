---
// Animation script component for GSAP animations
---

<script>
  import { gsap } from 'gsap'
  import { ScrollTrigger } from 'gsap/ScrollTrigger'

  // Register ScrollTrigger plugin
  gsap.registerPlugin(ScrollTrigger)

  // Initialize animations when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Hero section animations
    const heroTl = gsap.timeline()

    // Animate hero title
    heroTl.from('.hero-title', {
      duration: 1.2,
      y: 100,
      opacity: 0,
      ease: 'power3.out',
      stagger: 0.2
    })
    .from('.hero-subtitle', {
      duration: 0.8,
      y: 50,
      opacity: 0,
      ease: 'power2.out'
    }, '-=0.6')
    .from('.hero-buttons', {
      duration: 0.6,
      y: 30,
      opacity: 0,
      ease: 'power2.out'
    }, '-=0.4')
    .from('.hero-stats', {
      duration: 0.8,
      scale: 0.8,
      opacity: 0,
      ease: 'back.out(1.7)',
      stagger: 0.1
    }, '-=0.2')

    // Floating elements animation
    gsap.to('.floating-element', {
      duration: 6,
      rotation: 360,
      ease: 'none',
      repeat: -1,
      stagger: 0.5
    })

    // Section reveal animations
    gsap.utils.toArray('section').forEach((section: any) => {
      if (section.id !== 'hero') {
        gsap.from(section, {
          scrollTrigger: {
            trigger: section,
            start: 'top 80%',
            end: 'bottom 20%',
            toggleActions: 'play none none reverse'
          },
          duration: 1,
          y: 60,
          opacity: 0,
          ease: 'power3.out'
        })
      }
    })

    // Card hover animations
    const cards = gsap.utils.toArray('.hover-card')
    cards.forEach((card: any) => {
      card.addEventListener('mouseenter', () => {
        gsap.to(card, {
          duration: 0.3,
          scale: 1.02,
          y: -5,
          ease: 'power2.out'
        })
      })

      card.addEventListener('mouseleave', () => {
        gsap.to(card, {
          duration: 0.3,
          scale: 1,
          y: 0,
          ease: 'power2.out'
        })
      })
    })

    // Stats counter animation
    const stats = gsap.utils.toArray('.stat-number')
    stats.forEach((stat: any) => {
      const obj = { val: 0 }
      gsap.to(obj, {
        val: parseInt(stat.textContent.replace(/[^\d]/g, '')),
        duration: 2,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: stat,
          start: 'top 80%',
          toggleActions: 'play none none none'
        },
        onUpdate: () => {
          const suffix = stat.textContent.replace(/[\d\s]/g, '')
          stat.textContent = Math.round(obj.val) + suffix
        }
      })
    })

    // Parallax effect for background elements
    gsap.to('.parallax-bg', {
      scrollTrigger: {
        trigger: 'body',
        start: 'top bottom',
        end: 'bottom top',
        scrub: 1
      },
      y: -100,
      ease: 'none'
    })

    // Button pulse animation
    gsap.to('.pulse-button', {
      duration: 2,
      scale: 1.05,
      ease: 'power2.inOut',
      repeat: -1,
      yoyo: true
    })

    // Gradient animation
    gsap.to('.animated-gradient', {
      duration: 8,
      backgroundPosition: '200% 0%',
      ease: 'none',
      repeat: -1
    })
  })
</script>